#!/usr/bin/env python

Import('env')

javascript_files = [
    'audio_driver_javascript.cpp',
    'http_client_javascript.cpp',
    'javascript_eval.cpp',
    'javascript_main.cpp',
    'os_javascript.cpp',
]

env['PROGSUFFIX'] += '.wasm' if env['wasm'] else '.asmjs'

if env['wasm']:
    build = env.add_program(['#bin/godot${PROGSUFFIX}.js', '#bin/godot${PROGSUFFIX}.wasm'], javascript_files)
    js, wasm = build
    wrapper_start = env.File('pre_wasm.js')
else:
    build = env.add_program(['#bin/godot${PROGSUFFIX}.js', '#bin/godot${PROGSUFFIX}.asm.js', '#bin/godot${PROGSUFFIX}.js.mem'], javascript_files)
    js, asm, mem = build
    wrapper_start = env.File('pre_asmjs.js')

js_libraries = [
    'http_request.js',
]
for lib in js_libraries:
    env.Append(LINKFLAGS=['--js-library', env.File(lib).path])
env.Depends(build, js_libraries)

js_modules = [
    'id_handler.js',
]
for module in js_modules:
    env.Append(LINKFLAGS=['--pre-js', env.File(module).path])
env.Depends(build, js_modules)

wrapper_end = env.File('engine.js')
js_wrapped = env.Textfile('#bin/godot', [wrapper_start, js, wrapper_end], TEXTFILESUFFIX='${PROGSUFFIX}.wrapped.js')

zip_dir = env.Dir('#bin/.javascript_zip')
if env['wasm']:
    zip_files = env.InstallAs([
        zip_dir.File('godot.js'),
        zip_dir.File('godot.wasm'),
        zip_dir.File('godot.html')
    ], [
        js_wrapped,
        wasm,
        '#misc/dist/html/full-size.html'
    ])
else:
    zip_files = env.InstallAs([
        zip_dir.File('godot.js'),
        zip_dir.File('godot.asm.js'),
        zip_dir.File('godot.mem'),
        zip_dir.File('godot.html')
    ], [
        js_wrapped,
        asm,
        mem,
        '#misc/dist/html/full-size.html'
    ])

env.Zip('#bin/godot', zip_files, ZIPROOT=zip_dir, ZIPSUFFIX='${PROGSUFFIX}${ZIPSUFFIX}', ZIPCOMSTR='Archving $SOURCES as $TARGET')
